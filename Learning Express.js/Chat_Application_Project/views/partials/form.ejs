<div class="form">
  <form
    method="POST"
    action="/users"
    enctype="multipart/form-data"
    class="formbody"
  >
    <img
      title="go back"
      class="back"
      onclick="show()"
      src="/images/Cross-Close-256.png"
      alt="back"
    />
    <h1>Create new user</h1>
    <input placeholder="enter name" type="text" name="name" />
    <p style="border: 0px;" class="error name-err"></p>
    <input placeholder="enter email" type="email" name="email" />
    <p style="border: 0px;" class="error email-err"></p>
    <input placeholder="enter mobile" type="number" name="mobile" />
    <p style="border: 0px;" class="error mobile-err"></p>
    <input placeholder="enter password" type="password" name="password" />
    <p style="border: 0px;" class="error password-err"></p>
    <input
      type="file"
      style="background-color: rgba(0, 0, 0, 0)"
      name="avatar"
    />
    <p class="error err-avatar"></p>

    <p class="error common-err"></p>
    <button type="submit">Submit</button>
  </form>
</div>
<script
  type="text/javascript"
  src="https://cdn.jsdelivr.net/npm/toastify-js"
></script>
<script>
  // const form = document.querySelector(".form");
  const form = document.getElementsByClassName("form")[0];
  const Formbody = document.querySelector(".formbody");
  const errorPlaceholders = document.querySelectorAll("p.error");
  const inputErrors = document.querySelectorAll("input.error");
  for (let i = 0; i < errorPlaceholders.length; i++) {
    errorPlaceholders[i].style.display = "none";
  }

  for (let i = 0; i < inputErrors.length; i++) {
    inputErrors[i].classList.remove("error");
  }

  show = () => {
    form.style.display = form.style.display === "flex" ? "none" : "flex";
    if(form.style.display==='none')
    location.reload();
  };

  form.onsubmit = async (e) => {
    e.preventDefault();

    const formData = new FormData(Formbody);

    let response = await fetch("/users", {
      method: "POST",
      body: formData,
    });

    let result = await response.json();

    if (result.errors) {
      Object.keys(result.errors).forEach((fieldName) => {
        Formbody[fieldName].classList.add("error");

        const errorPlaceholder = document.querySelector(`.${fieldName}-err`);
        errorPlaceholder.innerHTML = result.errors[fieldName].msg;

        errorPlaceholder.style.display = "block";
      });
    } else {
      Toastify({
        text: "User was successfully created!Reloading the list...",
        duration: 2000,
        gravity: "top",
        position: "right",
        style: {
          background: "linear-gradient(to right, #00b09b, #96c93d)",
        },
      }).showToast();
      // closeModal();
      document.querySelector("p.error").style.display = "none";
      form.style.display='none';
      setTimeout(() => {
        location.reload();
      }, 2000);
    }
  };

</script>
